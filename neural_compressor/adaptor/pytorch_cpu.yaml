#
# Copyright (c) 2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
-
  version:
    name: '1.11'

  bf16: ['Linear', 'bmm', 'mm', 'baddbmm', 'addmm', 'addbmm',
          'Conv1d', 'Conv2d', 'Conv3d', 'LSTM', 'LSTMCell', 'GRU', 'GRUCell']
  fp32: ['*'] # `*` means all op types.
  int8: &1_11_capabilities {
    'static': &cap_s8_1_11 {
          'Conv1d': &cap_s8_1_11_Conv1d {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym', 'sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['kl', 'minmax']
                        },
                    },
          'Linear': *cap_s8_1_11_Conv1d,
          'Conv2d': *cap_s8_1_11_Conv1d,
          'Conv3d': *cap_s8_1_11_Conv1d,
          'EmbeddingBag': &cap_static_s8_1_11_EmbeddingBag {
            'weight': {
                        'dtype': ['uint8'],
                        'scheme': ['asym_float'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['fp32'],
                        'compute_dtype': ['None'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['placeholder']
                        },
                    },
          'Embedding': *cap_static_s8_1_11_EmbeddingBag,
          # LayerNorm, InstanceNorm3d have accuracy issue now,
          # So fallback to fp32, will remove when PyTorch fixed this issue.
          'LayerNorm': &cap_static_s8_1_11_LayerNorm {
            'activation': {
                        'dtype': ['fp32'],
                        },
            'weight': {
                        'dtype': ['fp32'],
                        },
                    },
          'InstanceNorm3d': *cap_static_s8_1_11_LayerNorm,
          'Dropout': *cap_static_s8_1_11_LayerNorm,
          'QuantStub': &cap_static_s8_1_11_QuantStub {
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
          'ConvTranspose1d': &cap_static_s8_1_11_ConvTranspose1d {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym', 'sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['kl', 'minmax']
                        },
                    },
          'ConvTranspose2d': *cap_static_s8_1_11_ConvTranspose1d,
          'ConvTranspose3d': *cap_static_s8_1_11_ConvTranspose1d,
          'default': &cap_static_s8_1_11_default {
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['kl']
                        },
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
                     },
          },
    'dynamic': &cap_dynamic_s8_1_11 {
          'Linear': &cap_dynamic_s8_1_11_Linear {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
                    },
          'LSTM': &cap_dynamic_s8_1_11_LSTM {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': [ 'sym', 'asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
                    },
          'EmbeddingBag': &cap_dynamic_s8_1_11_EmbeddingBag {
            'weight': {
                        'dtype': ['uint8'],
                        'scheme': ['asym_float'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['fp32'],
                        'compute_dtype': ['None'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['placeholder']
                        },
                    },
          'GRU': *cap_dynamic_s8_1_11_LSTM,
          'LSTMCell': *cap_dynamic_s8_1_11_LSTM,
          'RNNCell': *cap_dynamic_s8_1_11_LSTM,
          'GRUCell': *cap_dynamic_s8_1_11_LSTM,
          'Embedding': *cap_dynamic_s8_1_11_EmbeddingBag,
          'Conv2d':  &cap_dynamic_s8_1_11_Conv {
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
                    },
          'Conv1d': *cap_dynamic_s8_1_11_Conv,
          'Conv3d': *cap_dynamic_s8_1_11_Conv,
          'ConvTranspose1d': *cap_dynamic_s8_1_11_Conv,
          'ConvTranspose2d': *cap_dynamic_s8_1_11_Conv,
          'ConvTranspose3d': *cap_dynamic_s8_1_11_Conv,
          'default': {
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
                    },
          },
    'quant_aware': &cap_qat_1_11 {
          'Conv1d': &cap_qa_1_11_Conv1d {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym', 'sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
                    },
          'Linear': *cap_qa_1_11_Conv1d,
          'Conv2d': *cap_qa_1_11_Conv1d,
          'Conv3d': *cap_qa_1_11_Conv1d,
          'EmbeddingBag': &cap_qat_s8_1_11_EmbeddingBag {
            'weight': {
                        'dtype': ['uint8'],
                        'scheme': ['asym_float'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['fp32'],
                        'compute_dtype': ['None'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['placeholder']
                        },
                    },
          'Embedding': *cap_qat_s8_1_11_EmbeddingBag,
          'LayerNorm': *cap_static_s8_1_11_LayerNorm,
          'InstanceNorm3d': *cap_static_s8_1_11_LayerNorm,
          'QuantStub': *cap_static_s8_1_11_QuantStub,
          'ConvTranspose1d': &cap_qa_s8_1_11_ConvTranspose1d {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym', 'sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
                    },
          'ConvTranspose2d': *cap_qa_s8_1_11_ConvTranspose1d,
          'default': &cap_qa_s8_1_11_default {
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
                     },
          },
    }

  weight_only_integer: &cap_weight_only_integer {
      'Linear': &cap_weight_only_integer_linear {  # only Linear now
          'weight': {
                      'dtype': ['int', 'int8', 'int4', 'nf4', 'fp4', 'fp4_e2m1_bnb', 'fp4_e2m1'],
                      'bits': [4, 1, 2, 3, 5, 6, 7, 8], # [1-8], # 4
                      # group_size=-1 means per-channel, others means per-group
                      'group_size': [32, -1, 1, 4, 8, 16, 64, 128, 256, 512, 1024], # [1-inf], # 32
                      'scheme': ['sym', 'asym'], # sym, no ZP
                      'algorithm': ['RTN', 'AWQ', 'GPTQ', 'TEQ', 'AUTOROUND'], # RTN, [RTN, GPTQ, AWQ,] RTN+AWQ+TEQ order
                      },
          'activation': {
                      'dtype': ['fp32'],
                      },
                  },
      'default': *cap_weight_only_integer_linear,
  }


-
  version:
    name: '1.10'

  bf16: []
  fp32: ['*'] # `*` means all op types.
  int8: &1_10_capabilities {
    'static': &cap_s8_1_10 {
          'Conv1d': *cap_s8_1_11_Conv1d,
          'Linear': *cap_s8_1_11_Conv1d,
          'Conv2d': *cap_s8_1_11_Conv1d,
          'Conv3d': *cap_s8_1_11_Conv1d,
          'EmbeddingBag': *cap_static_s8_1_11_EmbeddingBag,
          'Embedding': *cap_static_s8_1_11_EmbeddingBag,
          # LayerNorm, InstanceNorm3d have accuracy issue now,
          # So fallback to fp32, will remove when PyTorch fixed this issue.
          'LayerNorm': *cap_static_s8_1_11_LayerNorm,
          'InstanceNorm3d': *cap_static_s8_1_11_LayerNorm,
          'QuantStub': *cap_static_s8_1_11_QuantStub,
          'ConvTranspose1d': *cap_static_s8_1_11_ConvTranspose1d,
          'ConvTranspose2d': *cap_static_s8_1_11_ConvTranspose1d,
          'default': *cap_static_s8_1_11_default,
          },
    'dynamic': *cap_dynamic_s8_1_11,
    'quant_aware': *cap_qat_1_11
    }
  uint8: *cap_s8_1_10


-
  version:
    name: '1.7'

  bf16: []
  fp32: ['*'] # '*' means all op types
  int8: &1_7_capabilities {
    'static': *cap_s8_1_10,
    'dynamic': *cap_dynamic_s8_1_11,
    'quant_aware': *cap_qat_1_11,
  }
  uint8: *cap_s8_1_10


-
  version:
    name: '1.6'

  bf16: []
  fp32: ['*'] # '*' means all op types
  int8: &1_6_capabilities {
    'static': &cap_s8_1_6 {
          'Conv1d': &cap_s8_1_6_Conv1d {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym', 'sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['kl', 'minmax']
                        },
                    },
          'Linear': *cap_s8_1_6_Conv1d,
          'Conv2d': *cap_s8_1_6_Conv1d,
          'Conv3d': *cap_s8_1_6_Conv1d,
          'QuantStub': {
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
          'default': {
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['kl']
                        }
                    }
          },
    'dynamic': &cap_dynamic_s8_1_6 {
          'Linear': &cap_dynamic_s8_1_6_Linear {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
                    },
          'LSTM': &cap_dynamic_s8_1_6_LSTM {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['sym', 'asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
                    },
          'GRU': *cap_dynamic_s8_1_6_LSTM,
          'LSTMCell': *cap_dynamic_s8_1_6_LSTM,
          'RNNCell': *cap_dynamic_s8_1_6_LSTM,
          'GRUCell': *cap_dynamic_s8_1_6_LSTM,
          'default': {
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
          },
    'quant_aware': *cap_s8_1_6
  }
  uint8: *cap_s8_1_6


-
  version:
    name: '1.3'

  bf16: []
  fp32: ['*'] # '*' means all op types
  int8: &1_3_capabilities {
    'static': *cap_s8_1_6,
    'dynamic': &cap_dynamic_s8_1_3 {
          'Linear': *cap_dynamic_s8_1_6_Linear,
          'LSTM': *cap_dynamic_s8_1_6_LSTM,
          'default': {
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
          },
    'quant_aware': *cap_s8_1_6
  }
  uint8: *cap_s8_1_6


-
  version:
    name: 'default'

  bf16: []
  fp32: ['*'] # '*' means all op types
  int8: &default_capabilities {
    'static': *cap_s8_1_6,
    'dynamic': *cap_dynamic_s8_1_6,
    'quant_aware': *cap_s8_1_6
  }
  uint8: *cap_s8_1_6
