#
# Copyright (c) 2022 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
-
  version:
    name: ['2.11.0202242', '2.11.0202250', '2.11.0202317', '2.11.0202323', '2.14.0202335', '2.14.dev202335', '2.15.0202341', '2.16.1', '2.17.0', '2.18.0']

  bf16: ["_MklLayerNorm", "Conv2D", "Conv2DBackpropFilter", "Conv2DBackpropInput", "Conv3D", "Conv3DBackpropFilterV2", "Conv3DBackpropInputV2",
          "DepthwiseConv2dNative", "DepthwiseConv2dNativeBackpropFilter", "DepthwiseConv2dNativeBackpropInput", "GRUBlockCell",
          "AUGRUBlockCell", "MklGRU", "MklAUGRU", "MatMul", "BatchMatMul", "BatchMatMulV2", "_MklFusedBatchMatMulV2", "Einsum", # allow_list
          "Add", "AddN", "AddV2", "AvgPool", "AvgPool3D", "AvgPool3DGrad", "AvgPoolGrad", "BiasAdd", "BiasAddGrad", "BiasAddV1",
          "Erf", "FusedBatchNormV2", "FusedBatchNormGradV2", "FusedBatchNormV3", "FusedBatchNormGradV3", "LeakyRelu", "LeakyReluGrad",
          "Mean", "Mul", "Sub", "Elu", "EluGrad", "FloorDiv", "_FusedBatchNormEx", "Log", "Log1p", "LogSoftmax", "Prod", "RealDiv",
          "Reciprocal", "Rsqrt", "Selu", "SeluGrad", "Sigmoid", "SigmoidGrad", "Softmax", "Softplus", "SoftplusGrad", "Softsign",
          "SoftsignGrad", "Sqrt", "Square", "SquaredDifference", "Sum", "Tanh", "TanhGrad", "SparseSegmentSqrtN", # infer_list
          "Abs", "ArgMax","ArgMin","BatchToSpace","BatchToSpaceND","BroadcastTo","Ceil","CheckNumerics","ClipByValue","Concat","ConcatV2",
          "DepthToSpace","DynamicPartition","DynamicStitch","EnsureShape","Enter","Equal","Exit","ExpandDims","Fill","Floor","Gather",
          "GatherNd","GatherV2","Greater","GreaterEqual","Identity","IsFinite","IsInf","IsNan","Less","LessEqual","Max","Maximum","MaxPool",
          "MaxPool3D","MaxPool3DGrad","MaxPoolGrad","MaxPoolGradGrad","MaxPoolGradGradV2","MaxPoolGradV2","MaxPoolV2","Merge","Min","Minimum",
          "MirrorPad","MirrorPadGrad","Neg","NextIteration","NotEqual","OnesLike","Pack","Pad","PadV2","PreventGradient","Rank","Relu","Relu6",
          "Relu6Grad","ReluGrad","Reshape","ResizeNearestNeighbor","ResizeNearestNeighborGrad", "ResizeBilinear", "Reverse","ReverseSequence",
          "ReverseV2","Round", "Select","SelectV2","Shape","ShapeN","Sign","Slice","Snapshot","SpaceToBatch","SpaceToBatchND","SpaceToDepth",
          "Split","SplitV","Squeeze","StopGradient","StridedSlice","StridedSliceGrad","Switch","Tile","TopK","TopKV2","Transpose",
          "Where","Unpack","ZerosLike" #clear list
          ]
  fp32: ['*'] # '*' means all op types
  int8: {
    'static': {
        'Conv2D': {
          'weight': {
                      'dtype': ['int8'],
                      'scheme': ['sym'],
                      'granularity': ['per_channel','per_tensor'],
                      'algorithm': ['minmax']
                      },
          'activation': {
                      'dtype': ['int8', 'uint8'],
                      'scheme': ['sym'],
                      'granularity': ['per_tensor'],
                      'algorithm': ['minmax', 'kl']
                      }
                  },
        'FusedBatchNormV3': {
          'activation': {
                      'dtype': ['int8'],
                      'scheme': ['sym'],
                      'granularity': ['per_tensor'],
                      'algorithm': ['minmax', 'kl']
                      }
                  },
        'Conv3D': {
          'weight': {
                      'dtype': ['int8'],
                      'scheme': ['sym'],
                      'granularity': ['per_channel', 'per_tensor'],
                      'algorithm': ['minmax']
                      },
          'activation': {
                      'dtype': ['int8', 'uint8'],
                      'scheme': ['sym'],
                      'granularity': ['per_tensor'],
                      'algorithm': ['minmax', 'kl']
                      }
                  },
        '_MklFusedInstanceNorm': {
          'activation': {
                      'dtype': ['int8', 'fp32'],
                      'scheme': ['sym'],
                      'granularity': ['per_tensor'],
                      'algorithm': ['minmax', 'kl']
                      }
                  },
        'MatMul': {
          'weight': {
                      'dtype': ['int8'],
                      'scheme': ['sym'],
                      'granularity': ['per_tensor', 'per_channel'],
                      'algorithm': ['minmax']
                      },
          'activation': {
                      'dtype': ['int8', 'uint8'],
                      'scheme': ['asym', 'sym'],
                      'granularity': ['per_tensor'],
                      'algorithm': ['minmax']
                      }
                  },
        'BatchMatMul': {
          'weight': {
                      'dtype': ['int8', 'fp32'],
                      'scheme': ['sym'],
                      'granularity': ['per_tensor'],
                      'algorithm': ['minmax']
                      },
          'activation': {
                      'dtype': ['int8', 'fp32'],
                      'scheme': ['sym'],
                      'granularity': ['per_tensor'],
                      'algorithm': ['minmax']
                      }
                  },
        'BatchMatMulV2': {
          'weight': {
                      'dtype': ['int8'],
                      'scheme': ['sym'],
                      'granularity': ['per_tensor'],
                      'algorithm': ['minmax']
                      },
          'activation': {
                      'dtype': ['int8', 'uint8'],
                      'scheme': ['asym', 'sym'],
                      'granularity': ['per_tensor'],
                      'algorithm': ['minmax']
                      }
                  },
        'DepthwiseConv2dNative': &ref_default_static {
          'activation': {
                      'dtype': ['uint8'],
                      'algorithm': ['minmax'],
                      'scheme': ['sym'],
                      'granularity': ['per_tensor']
                      }
                  },
        'ConcatV2': *ref_default_static,
        'FusedBatchNorm': *ref_default_static,
        'FusedBatchNormV2': *ref_default_static,
        'MaxPool': *ref_default_static,
        'MaxPool3D': *ref_default_static,
        'AvgPool': *ref_default_static,
        'Conv2DBackpropInput': *ref_default_static,
        'Conv3DBackpropInputV2': *ref_default_static,
        'default': *ref_default_static
    },
    'dynamic': {
    }
  }


-
  version:
    name: ['2.1.0', '2.2.0', '2.3.0', '2.4.0', '2.5.0', '2.6.0', '2.6.1', '2.6.2', '2.7.0', '2.8.0', '2.9.0', '2.9.1', '2.10.0', '2.11.0', '2.12.0', '2.13.0', '1.15.0-up1', '1.15.0-up2', '1.15.0-up3']

  bf16: ['Conv2D', 'Conv3D', 'MatMul', 'BatchMatMul', 'MaxPool', 'MaxPool3D', 'AvgPool', 'AvgPool3D', 'DepthwiseConv2dNative']
  fp32: ['*'] # '*' means all op types

  int8: {
    'static': {
      'Conv2D': {
        'weight': {
                    'dtype': ['int8'],
                    'scheme': ['sym'],
                    'granularity': ['per_channel','per_tensor'],
                    'algorithm': ['minmax']
                    },
        'activation': {
                    'dtype': ['int8', 'uint8'],
                    'scheme': ['sym'],
                    'granularity': ['per_tensor'],
                    'algorithm': ['minmax', 'kl']
                    }
                },
      'MatMul': {
        'weight': {
                    'dtype': ['int8'],
                    'scheme': ['sym'],
                    'granularity': ['per_tensor'],
                    'algorithm': ['minmax']
                    },
        'activation': {
                    'dtype': ['int8', 'uint8'],
                    'scheme': ['asym', 'sym'],
                    'granularity': ['per_tensor'],
                    'algorithm': ['minmax']
                    }
                },
      'DepthwiseConv2dNative': *ref_default_static,
      'ConcatV2': *ref_default_static,
      'MaxPool': *ref_default_static,
      'AvgPool': *ref_default_static,
      'default': *ref_default_static
    },
    'dynamic': {
    }
  }



-
  version:
    name: ['default', '1.15.0', '1.15.2', '2.0.0', '2.0.1']

  bf16: []
  fp32: ['*'] # '*' means all op types
  int8: {
    'static': {
      'Conv2D': {
        'weight': {
                    'dtype': ['int8'],
                    'scheme': ['sym'],
                    'granularity': ['per_channel','per_tensor'],
                    'algorithm': ['minmax']
                    },
        'activation': {
                    'dtype': ['uint8'],
                    'scheme': ['sym'],
                    'granularity': ['per_tensor'],
                    'algorithm': ['minmax', 'kl']
                    }
                },
      'MatMul': {
        'weight': {
                    'dtype': ['int8'],
                    'scheme': ['sym'],
                    'granularity': ['per_tensor'],
                    'algorithm': ['minmax']
                    },
        'activation': {
                    'dtype': ['uint8'],
                    'scheme': ['asym', 'sym'],
                    'granularity': ['per_tensor'],
                    'algorithm': ['minmax']
                    }
                },
      'DepthwiseConv2dNative': *ref_default_static,
      'ConcatV2': *ref_default_static,
      'MaxPool': *ref_default_static,
      'AvgPool': *ref_default_static,
      'default': *ref_default_static
    },
    'dynamic': {
    }
  }
