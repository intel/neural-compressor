parameters:
  - name: modelName
    type: string
    default: "resnet50v1.5"
  - name: framework
    type: string
    default: "tensorflow"
  - name: APIVersion
    type: string
    default: ""

  - name: modelContainerName
    type: string
    default: "model"

steps:
  - template: docker-template.yml
    parameters:
      dockerConfigName: "commonDockerConfig"
      repoName: "neural-compressor"
      repoTag: "py310"
      dockerFileName: "Dockerfile"
      containerName: ${{ parameters.modelContainerName }}

  - script: |
      docker exec ${{ parameters.modelContainerName }} bash -c "cd /neural-compressor/.azure-pipelines/scripts/models \
      && bash run_${{ parameters.framework }}_models_trigger.sh --model=${{ parameters.modelName }} --mode='env_setup'"
    displayName: Env setup

  - task: DownloadPipelineArtifact@2
    continueOnError: true
    inputs:
      source: "specific"
      artifact: ${{ parameters.framework }}_${{ parameters.modelName }}
      patterns: "**_summary.log"
      path: $(Build.SourcesDirectory)/.azure-pipelines/scripts/models/${{ parameters.modelName }}_refer_log
      project: $(System.TeamProject)
      pipeline: "Model-Test"
      runVersion: "specific"
      runId: $(refer_buildId)
      retryDownloadCount: 3
    displayName: "Download refer logs"

  - script: |
      docker exec ${{ parameters.modelContainerName }} bash -c "cd /neural-compressor/.azure-pipelines/scripts/models \
      && bash run_${{ parameters.framework }}_models_trigger.sh --model=${{ parameters.modelName }} --mode='tuning'"
    displayName: Quantization

  - ${{ if ne(parameters.APIVersion, '3x') }}:
    - script: |
        docker exec ${{ parameters.modelContainerName }} bash -c "cd /neural-compressor/.azure-pipelines/scripts/models \
        && bash run_${{ parameters.framework }}_models_trigger.sh --model=${{ parameters.modelName }} --mode='int8_benchmark' --USE_TUNE_ACC=$(USE_TUNE_ACC) --PERF_STABLE_CHECK=$(PERF_STABLE_CHECK)"
      displayName: INT8 Benchmark

    - script: |
        docker exec ${{ parameters.modelContainerName }} bash -c "cd /neural-compressor/.azure-pipelines/scripts/models \
        && bash run_${{ parameters.framework }}_models_trigger.sh --model=${{ parameters.modelName }} --mode='fp32_benchmark' --USE_TUNE_ACC=$(USE_TUNE_ACC) --PERF_STABLE_CHECK=$(PERF_STABLE_CHECK)"
      displayName: FP32 Benchmark

  - task: Bash@3
    inputs:
      targetType: "inline"
      script: |
        docker exec ${{ parameters.modelContainerName }} bash -c "cd /neural-compressor/.azure-pipelines/scripts/models \
        && bash run_${{ parameters.framework }}_models_trigger.sh --model=${{ parameters.modelName }} --mode='collect_log' --BUILD_BUILDID=$(Build.BuildId)"
    displayName: Collect log

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(Build.SourcesDirectory)/.azure-pipelines/scripts/models/${{ parameters.modelName }}/
      artifact: ${{ parameters.framework }}_${{ parameters.modelName }}
      publishLocation: "pipeline"

  - task: Bash@3
    condition: always()
    inputs:
      targetType: "inline"
      script: |
        docker stop ${{ parameters.modelContainerName }}
        docker rm -vf ${{ parameters.modelContainerName }} || true
    displayName: "Docker clean up"
