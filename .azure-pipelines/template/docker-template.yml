parameters:
  - name: dockerConfigName
    type: string
    default: "commonDockerConfig"
  - name: repoName
    type: string
    default: "neural-compressor"
  - name: repoTag
    type: string
    default: "py310"
  - name: dockerFileName
    type: string
    default: "Dockerfile"
  - name: containerName
    type: string
  - name: repo
    type: string
    default: "https://github.com/intel/neural-compressor"
  - name: imageSource
    type: string
    default: "build"

steps:
  - task: Bash@3
    inputs:
      targetType: "inline"
      script: |
        docker ps -a
        if [[ $(docker ps -a | grep -i '${{ parameters.containerName }}'$) ]]; then
            docker start $(docker ps -aq --filter "name=${{ parameters.containerName }}")
            echo "remove left files through container ..."
            docker exec ${{ parameters.containerName }} bash -c "ls -a /neural-compressor && rm -fr /neural-compressor/* && rm -fr /neural-compressor/.* && ls -a /neural-compressor  || true"
        fi
    displayName: "Docker workspace clean up"

  - ${{ if eq(parameters.dockerConfigName, 'commonDockerConfig') }}:
      - script: |
          rm -fr ${BUILD_SOURCESDIRECTORY} || sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
        displayName: "Clean workspace"

      - checkout: self
        clean: true
        displayName: "Checkout out Repo"
        fetchDepth: 0

  - ${{ if eq(parameters.dockerConfigName, 'gitCloneDockerConfig') }}:
      - script: |
          rm -fr ${BUILD_SOURCESDIRECTORY} || sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
          mkdir ${BUILD_SOURCESDIRECTORY}
          chmod 777 ${BUILD_SOURCESDIRECTORY}
        displayName: "Clean workspace"

      - checkout: none

      - script: |
          git clone ${{ parameters.repo }} ${BUILD_SOURCESDIRECTORY}
          git config --global --add safe.directory ${BUILD_SOURCESDIRECTORY}
          cd ${BUILD_SOURCESDIRECTORY}
          git checkout master
        displayName: "Checkout out master"

  - ${{ if eq(parameters.imageSource, 'build') }}:
      - script: |
          docker image prune -a -f
          if [[ ! $(docker images | grep -i ${{ parameters.repoName }}:${{ parameters.repoTag }}) ]]; then
            docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/${{parameters.dockerFileName}}.devel -t ${{ parameters.repoName }}:${{ parameters.repoTag }} .
          fi
          docker images | grep -i ${{ parameters.repoName }}
          if [[ $? -ne 0 ]]; then
            echo "NO Such Repo"
            exit 1
          fi
        displayName: "Build develop docker image"

  - ${{ if eq(parameters.imageSource, 'pull') }}:
      - script: |
            docker pull vault.habana.ai/gaudi-docker/1.19.0/ubuntu22.04/habanalabs/pytorch-installer-2.5.1:latest
        displayName: "Pull habana docker image"

  - script: |
      docker stop $(docker ps -aq --filter "name=${{ parameters.containerName }}")
      docker rm -vf ${{ parameters.containerName }} || true
      env | sort
    displayName: "Clean docker container"

  - ${{ if ne(parameters.containerName, '') }}:
      - task: Bash@3
        inputs:
          targetType: "inline"
          script: |
            if [[ "${{ parameters.imageSource }}" == "build" ]]; then
                docker run -dit --disable-content-trust --privileged --name=${{ parameters.containerName }} --shm-size="2g" \
                -v ${BUILD_SOURCESDIRECTORY}:/neural-compressor -v /tf_dataset:/tf_dataset -v /tf_dataset2:/tf_dataset2 \
                ${{ parameters.repoName }}:${{ parameters.repoTag }}
            else
                docker run -dit --disable-content-trust --privileged --name=${{ parameters.containerName }} --shm-size="2g" \
                --runtime=habana -e HABANA_VISIBLE_DEVICES=all -e OMPI_MCA_btl_vader_single_copy_mechanism=none --cap-add=sys_nice --net=host --ipc=host \
                -v ${BUILD_SOURCESDIRECTORY}:/neural-compressor vault.habana.ai/gaudi-docker/1.19.0/ubuntu22.04/habanalabs/pytorch-installer-2.5.1:latest
                docker exec ${{ parameters.containerName }} bash -c "ln -sf \$(which python3) /usr/bin/python"
            fi
            echo "Show the container list after docker run ... "
            docker ps -a
        displayName: "Docker run - ${{ parameters.containerName }} Container"
